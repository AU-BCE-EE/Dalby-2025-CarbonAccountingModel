dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
View(dat)
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
#ggplot(dat2, aes(`Start DateTime`, `Emission CH4 [kg h-1]`)) + geom_point() + facet_wrap(~tank)
#dat2$`Emission CH4 [kg h-1]`
dat <- merge.data.table(dat, dat3)
dat <- merge.data.table(dat, dat2[,.(datetime, NH3_emis_rate_m2)], all = TRUE)
View(dat)
dat <- merge.data.table(dat, dat2[,.(datetime = datetime, NH3_emis_rate_m2 = NH3_emis_rate_m2)], all = TRUE)
dat2 <- dat2[,.(datetime = datetime, NH3_emis_rate_m2 = NH3_emis_rate_m2)]
View(dat2)
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
# emission
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime = datetime, NH3_emis_rate_m2 = NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
#ggplot(dat2, aes(`Start DateTime`, `Emission CH4 [kg h-1]`)) + geom_point() + facet_wrap(~tank)
#dat2$`Emission CH4 [kg h-1]`
dat <- merge.data.table(dat, dat3)
View(dat)
dat <- merge.data.table(dat, dat2[,.(datetime = datetime, NH3_emis_rate_m2 = NH3_emis_rate_m2)], all = TRUE)
dat <- merge.data.table(dat, dat2, all = TRUE)
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
View(dat2)
names(dat2) %in% names(dat)
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
View(dat2)
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
dat <- merge.data.table(dat, dat2)
dat <- merge.data.table(dat, dat2, by = 'datetime')
View(dat)
# emission
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
View(dat)
View(dat2)
dat <- merge.data.table(dat, dat2, by = 'datetime', all = T)
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
dat[dat2, on = .(datetime), roll = "nearest"]
View(dat)
dat <- dat[dat2, on = .(datetime), roll = "nearest"]
View(dat)
dat <- dat[!duplicated(dat[, (datetime, CH4_emis_rate)])]
dat <- dat[!duplicated(dat[, .(datetime, CH4_emis_rate)])]
View(dat)
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
dat <- dat[dat2, on = .(datetime), roll = "nearest"]
dat <- merge.data.table(dat, dat2, by = 'datetime', all = T)
dat[, NH3_emis_rate := NH3_emis_rate_m2 * area]
View(dat)
# emission
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
dat <- dat[dat2, on = .(datetime), roll = "nearest"]
dat[, NH3_emis_rate := NH3_emis_rate_m2 * area]
dat[, doy := yday(datetime)]
dat[, ":="(CH4_emis_rate = mean(CH4_emis_rate, na.rm = T),
CH4_emis_rate_m3 = mean(CH4_emis_rate_m3, na.rm = T),
NH3_emis_rate = mean(NH3_emis_rate, na.rm = T)), by =  .(tank, doy)]
library(openxlsx)
dat_anna1 <- dat[!grepl('C|A', tank), .(doy, CH4_emis_rate_m3, tank)]
write.xlsx(dat_anna1, '../data_anna1.xlsx')
dat_anna1 <- dat[.(doy, CH4_emis_rate_m3, tank)]
ggplot(dat_anna1, aes(doy, CH4_emis_rate_m3)) + geom_point() + facet_wrap(~tank)
dat[, ddt := c(1, diff(datetime, unit = 'hours')), by = tank]
# for some reason it does not work for P1 and AD4, which is still diff time in seconds and days respectively
dat[, newperiod2 := ddt > 168, by = tank]
dat[, sampperiod := cumsum(newperiod2) + 1, by = tank]
dat[, type := fifelse(grepl('P', tank), 'pig', fifelse(grepl('C', tank), 'cattle', 'digestate'))]
test <- dat[, .(mean_CH4_emis_rate_m3= mean(CH4_emis_rate_m3, na.rm = T),
sd = sd(CH4_emis_rate_m3, na.rm = T)), by = .(tank, sampperiod, type)]
mean <- test[, .(CH4_emis_rate_m3 = mean(mean_CH4_emis_rate_m3, na.rm = T),
sd = sd(mean_CH4_emis_rate_m3, na.rm = T)), by = .(tank, type)]
mean
dat_anna1 <- dat[!grepl('C|A', tank), .(doy, CH4_emis_rate_m3, tank)]
write.xlsx(dat_anna1, '../data_anna1.xlsx')
rm(list = ls())
library(ggplot2)
library(data.table)
library(readxl)
library(dplyr)
sheets <- excel_sheets('../dat/Temp time.xlsx')
temp <- data.table()
for(i in sheets){
temp1 <- setDT(read_excel('../dat/Temp time.xlsx', sheet = i))
temp1$tank <- i
temp <- bind_rows(temp, temp1)
}
temp[, datetime := as.POSIXct(datetime, format = '%d-%m-%Y %H:%M:%S')]
temp[, doy := as.integer(format(datetime, format = '%j'))]
temp[, decdoy := round(doy / 10) * 10]
temp[, year := year(datetime)]
slurry <- setDT(read_excel('../dat/Gyllehøjder mm Frederik.xlsx', sheet = 'Gyllehøjde'))
slurry$height <- slurry$height_cm/100
slurry$slurry_mass <- slurry$V_manure_m3 * 1000
slurry[, vol := area[1] * height, by = 'tank']
slurry[, tot_tank_V := V_air_tank_m3 + V_manure_m3]
slurry[, tot_height := tot_tank_V/area[1], by = 'tank']
slurry[, slurry_height := tot_height - height, by = 'tank']
slurry[, datetime := as.POSIXct(paste0(`Date/time`, ' 12:00:00'))]
merged <- merge.data.table(temp, slurry, by =c('datetime', 'tank'), all = T)
merged$slurry_mass_meas <- merged$slurry_mass
merged[, ":="(slurry_mass = approx(datetime, slurry_mass, xout = datetime)$y,
slurry_height = approx(datetime, slurry_height, xout = datetime)$y), by = 'tank']
# pH
pH <- setDT(read_excel('../dat/Data pH.xlsx'))
pH[, datetime := as.POSIXct(paste0(date, ' 12:00:00'))]
merged2 <- merge.data.table(merged, pH, by = c('datetime', 'tank'), all = T)
merged2 <- merged2[order(tank)]
# emission
dat <- setDT(read_excel('../dat/CH4 Emission.xlsx'))
dat[, ":="(datetime = as.POSIXct(as.Date((as.numeric(Time...4) + as.numeric(Time...5)) / 2, origin = "1900-01-01")),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24,
tank = ...1)] # g/day/m3
dat2 <- setDT(read_excel('../dat/Emissioner.xlsx'))
dat2[, ":="(datetime = as.POSIXct((as.numeric(Start) + as.numeric(End)) / 2, origin = "1970-01-01"),
CH4_emis_rate = `Emission CH4 [kg h-1]` * 1000 * 24,  # g/day
CH4_emis_rate_m3 = `Emission CH4 [kg h-1 m-3]` * 1000 * 24, # g/day/m3
NH3_emis_rate_m2 = `Emission NH3 [kg h-1 m-2]` * 1000 * 24)]
dat2 <- dat2[,.(datetime, NH3_emis_rate_m2)]
dat3 <- setDT(read_excel('../dat/Data Emission Frederik.xlsx', skip = 1))
dat3 <- dat3[!is.na(Tracer)]
dat3[, ":="(area = `Area (m2)`, tank = Tank)]
dat3 <- dat3[, .(area, tank)][!duplicated(tank)]
dat <- merge.data.table(dat, dat3)
dat <- dat[dat2, on = .(datetime), roll = "nearest"]
dat[, NH3_emis_rate := NH3_emis_rate_m2 * area]
dat[, doy := yday(datetime)]
dat[, ":="(CH4_emis_rate = mean(CH4_emis_rate, na.rm = T),
CH4_emis_rate_m3 = mean(CH4_emis_rate_m3, na.rm = T),
NH3_emis_rate = mean(NH3_emis_rate, na.rm = T)), by =  .(tank, doy)]
library(openxlsx)
dat_anna1 <- dat[!grepl('C|A', tank), .(doy, CH4_emis_rate_m3, tank)]
write.xlsx(dat_anna1, '../data_anna1.xlsx')
ggplot(dat_anna1, aes(doy, CH4_emis_rate_m3)) + geom_point() + facet_wrap(~tank)
dat[, ddt := c(1, diff(datetime, unit = 'hours')), by = tank]
# for some reason it does not work for P1 and AD4, which is still diff time in seconds and days respectively
dat[, newperiod2 := ddt > 168, by = tank]
dat[, sampperiod := cumsum(newperiod2) + 1, by = tank]
dat[, type := fifelse(grepl('P', tank), 'pig', fifelse(grepl('C', tank), 'cattle', 'digestate'))]
test <- dat[, .(mean_CH4_emis_rate_m3= mean(CH4_emis_rate_m3, na.rm = T),
#                sd = sd(CH4_emis_rate_m3, na.rm = T)), by = .(tank, sampperiod, type)]
mean <- test[, .(CH4_emis_rate_m3 = mean(mean_CH4_emis_rate_m3, na.rm = T),
#                 sd = sd(mean_CH4_emis_rate_m3, na.rm = T)), by = .(tank, type)]
mean <- mean[type == 'pig']
write.xlsx(mean, '../data_anna2.xlsx')
dat[, type := fifelse(grepl('P', tank), 'pig', fifelse(grepl('C', tank), 'cattle', 'digestate'))]
View(dat)
test <- dat[, .(mean_CH4_emis_rate_m3= mean(CH4_emis_rate_m3, na.rm = T),
sd = sd(CH4_emis_rate_m3, na.rm = T)), by = .(tank, sampperiod, type)]
mean <- test[, .(CH4_emis_rate_m3 = mean(mean_CH4_emis_rate_m3, na.rm = T),
sd = sd(mean_CH4_emis_rate_m3, na.rm = T)), by = .(tank, type)]
mean <- mean[type == 'pig']
write.xlsx(mean, '../data_anna2.xlsx')
ggplot(mean, aes(tank, CH4_emis_rate_m3, col = type)) + geom_point() +
geom_errorbar(aes(ymin = CH4_emis_rate_m3-sd, ymax = CH4_emis_rate_m3+sd, y = CH4_emis_rate_m3, x = tank)) +
labs(y = 'CH4, g/d/m3')
mean2 <- mean[, .(mean_CH4_emis_rate_m3 = mean(CH4_emis_rate_m3, na.rm = T),
sd_CH4_emis_rate_m3 = sd(CH4_emis_rate_m3, na.rm = T)), by = .(type)]
mean2
dat_selected <- dat[, .(datetime , CH4_emis_rate, NH3_emis_rate, tank, sampperiod)]
merged3 <- merge.data.table(merged2, dat_selected, by = c('datetime','tank'), all = T)
#ggplot(merged3, aes(datetime, CH4_emis_rate)) + geom_point() + facet_wrap(~tank)
merged_long <- melt(merged3, measure.vars = c('temp_05','temp_15','temp_25','temp_35','temp_45','temp_surf','temp_bottom'),
variable.name = "temp_position", value.name = "temp")
merged_long[, s := sd(temp), by = .(tank, decdoy, temp_position)]
# Using sub2 with sd filtering for average temperature
filtered <- merged_long[!tank %in% c('C1','C2','P1','P2'), temp := fifelse(s < 1, temp, NA_real_)]
filtered <- filtered[tank %in% c('C1','C2','P1','P2'), temp := fifelse(temp < 25, temp, NA_real_)]
View(merged_long)
merged3 <- merge.data.table(merged2, dat_selected, by = c('datetime','tank'), all = T)
#ggplot(merged3, aes(datetime, CH4_emis_rate)) + geom_point() + facet_wrap(~tank)
merged_long <- melt(merged3, measure.vars = c('temp_05','temp_15','temp_25','temp_35','temp_45','temp_surf','temp_bottom'),
variable.name = "temp_position", value.name = "temp")
View(merged_long)
View(merged_long)
merged_long[, s := sd(temp), by = .(tank, decdoy, temp_position)]
# Using sub2 with sd filtering for average temperature
filtered <- merged_long[!tank %in% c('C1','C2','P1','P2') & temp_position != 'temp_05', temp := fifelse(s < 1, temp, NA_real_)]
filtered <- filtered[tank %in% c('C1','C2','P1','P2'), temp := fifelse(temp < 25, temp, NA_real_)]
filtered[, temp_mean := mean(temp, na.rm = T), by = c('tank','decdoy')]
datfilt <- setDT(filtered[, .(datetime, tank, temp_mean, slurry_mass, slurry_mass_meas, area, CH4_emis_rate, NH3_emis_rate, pH, sampperiod)])
datfilt <- datfilt[, lapply(.SD, function(x) {
x[is.nan(x)] <- NA
return(x)
})]
datfilt[temp_mean <=0, temp_mean := 0.01]
datfilt[, sampperiod_int := approx(datetime, sampperiod, datetime)$y, by = 'tank']
datfilt[, sampperiod_int := fifelse(sampperiod_int != round(sampperiod_int), NA_real_, sampperiod_int)]
# how many times does slurry mass change during a sampling period?
datfilt[, cum_count := cumsum(!duplicated(slurry_mass_meas) & !is.na(slurry_mass_meas)) -1, by = c('sampperiod_int','tank')]
# set to 0, when below 1, because then there is no change.
datfilt[cum_count < 1, cum_count := 0]
datfilt[!is.na(sampperiod_int), slurrysampperiod_int := sampperiod_int + cum_count]
datfilt[!is.na(sampperiod_int), sampperiod_slurry := cumsum(!duplicated(datfilt[!is.na(sampperiod_int), c('sampperiod_int', 'slurrysampperiod_int','tank')]))]
datfilt[, ":="(slurrysampperiod_int = NULL, cum_count = NULL)]
"clear potential NaN"
datfilt <- datfilt[, lapply(.SD, function(x) {
x[is.nan(x)] <- NA
return(x)
})]
ggplot(datfilt, aes(datetime, temp_mean, col = as.factor(sampperiod_int))) + geom_point() + facet_wrap(~tank)
fwrite(datfilt, '../dat/dat_Pernille.csv')
dirs <- list.dirs('../../', full.names = T)
for (i in unique(datfilt[, tank])){
path <-  dirs[grepl(paste0('../../kasper_', i,'_2024/dat'), dirs)]
fwrite(datfilt, paste0(path,'/dat_Pernille.csv'))
}
ggplot(datfilt, aes(datetime, CH4_emis_rate, col = as.factor(sampperiod_int))) + geom_point() + facet_wrap(~tank)
ggplot(datfilt, aes(datetime, CH4_emis_rate, col = as.factor(sampperiod_int))) + geom_point() + facet_wrap(~tank, scales = 'free_x')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/data/kasper_P3_2024/scripts")
rates_calc = 'instant'
approx_method <- c(temp = 'linear', pH = 'linear', slurry_mass = 'mid')
dat <- fread('../dat/dat_Pernille.csv')
dat <- dat[tank == 'P3']
dat[, time := as.numeric(datetime - min(datetime))/60/60/24]
temp_dat <- copy(dat)
temp_dat <- as.data.frame(temp_dat[!is.na(temp_mean), .(time = mean(time, na.rm = T)), by = temp_mean])
temp_dat <- data.frame(time = temp_dat$time[!is.na(temp_dat$temp_mean)], temp_C = temp_dat$temp_mean[!is.na(temp_dat$temp_mean)])
temp_dat[!duplicated(temp_dat),]
pH_dat <- data.frame(time = dat$time[!is.na(dat$pH)], pH = dat$pH[!is.na(dat$pH)])
pH_dat <- pH_dat[!duplicated(pH_dat), ]
slurry_mass_dat <- data.frame(time = dat$time[!is.na(dat$slurry_mass_meas)], slurry_mass = dat$slurry_mass[!is.na(dat$slurry_mass_meas)])
slurry_mass_dat <- slurry_mass_dat[!duplicated(slurry_mass_dat),] #data.frame(time = dat$time[!is.na(dat$slurry_mass_meas)], slurry_mass = dat$slurry_mass[!is.na(dat$slurry_mass_meas)])
dat$name <- "kasper_P3_2024"
dat$set_weight <- as.numeric(read_excel('../../../misc/description.xlsx') %>% filter(dataset == dat$name[1]) %>% select(set_weight))
area <- unique(dat$area[!is.na(dat$area)])
wthr_pars = list(temp_air_C = 20, RH = 90, rain = 0, pres_kpa = 101, rs = 10)
evap_pars = list(evap = 0)
mng_pars = list(slurry_prod_rate = 0,
slurry_mass = slurry_mass_dat,
storage_depth = 5,
resid_depth = 0.035,
floor_area = 0,
area = area,
empty_int = 35,
temp_C = temp_dat,
wash_water = 0,
wash_int = NA,
rest_d = 7,
RH = 90,
cover = 'tent',
resid_enrich = 0.9,
slopes = c(urea = NA, slurry_prod_rate = NA),
graze = c(start = 'May', duration = 0, hours_day = 0),
scale = c(ks_coefficient = 1, qhat_opt = 1, xa_fresh = 1, yield = 1, alpha_opt = 1))
ff <- list.files('../../../R', full.names = T)
for (i in ff) source(i)
fresh <- abm_farm(dat = paste0('../../../inputs/', dat$name[1], '.xlsm'), years = 1, v = c(scale.yield = 1), VSd_apply, manure = 'pig')
debug(abm_barn)
fresh <- abm_farm(dat = paste0('../../../inputs/', dat$name[1], '.xlsm'), years = 1, v = c(scale.yield = 1), VSd_apply, manure = 'pig')
library(ABM)
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2025-KVIK/scripts")
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
# checking amonuts of manure
#test <- dat[StaldID == 7 & GoedningsNavn == 'Gylle' & Scenarie == 'kontrol']
#sum(test$TotGoednabDyr)
CO2_eq <- c(CH4 = 28, N2O = 265)
## SVIN
# gylle systemer
toklimastald_smågrise <- c(20)
spalter_smågrise <- c(46)
spalter_33_67_slagtesvin <- c(47)
spalter_50_75_slagtesvin <- c(72, 19)
spalter_25_50_slagtesvin <- c(73)
løs_individuel_søer <- c(60, 63, 8, 10, 80, 79)
farestald_delvis_spalte <- c(64)
farestald_fuldspalte <- c(65)
svin_gylle <- c(20,46,47,72,19,73,60,63,8,10,80,79,64,65)
## KVÆG
# gylle systemer
kvæg_ringkanal <- c(6, 13)
kvæg_fast_skrab <- c(5, 11)
kvæg_spalter_skrab <- c(7, 14)
kvæg_hæld_fast_skrab <- c(49)
kvæg_andre_hyppig <- c(2, 4) # 2 is spaltegulvbokse, what is that?
kvæg_gylle <- c(6,13,5,11,7,14,49,2,4)
model_gruppe_navne <- c('toklimastald_smågrise',
'spalter_smågrise',
'spalter_33_67_slagtesvin',
'spalter_50_75_slagtesvin',
'spalter_25_50_slagtesvin',
'løs_individuel_søer',
'farestald_delvis_spalte',
'farestald_fuldspalte',
'kvæg_ringkanal',
'kvæg_fast_skrab',
'kvæg_spalter_skrab',
'kvæg_hæld_fast_skrab',
'kvæg_andre_hyppig'
)
cols <- c('CH4_dyr_stald', 'CH4_dyr_lager', 'CH4_dyr_biog', 'NH3_dyr_stald', 'NH3_dyr_lager','N2O_dyr_dir_tot', 'N2O_dyr_indir_tot', 'strøm_CO2_ton')
tot_cols <- paste0('tot', cols)
dat[, strøm_CO2_ton := 0]
# Initialize the total columns with 0
dat <- dat[, (tot_cols) := 0][!duplicated(dat)]
# if biogas is used change the CH4 produktion to include emission from prestorage tank and change storage to digestate emission.
# also change N2O emission (based on national inventory report 2023, p431)
biogas <- copy(dat)[Scenarie == 'kontrol'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'biogas']
ugentlig_biogas <- copy(dat)[Scenarie == 'ugentlig'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'ugentlig_biogas']
køling_biogas <- copy(dat)[Scenarie == 'køling'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'køling_biogas']
dat <- rbind(dat, biogas, ugentlig_biogas, køling_biogas)
dat[grepl('køling', Scenarie) & DyreType == 'smågrise', strøm_CO2_ton := 1.3]
dat[grepl('køling', Scenarie) & DyreType == 'slagtesvin', strøm_CO2_ton := 1.4]
dat[grepl('køling', Scenarie) & DyreType == 'søer', strøm_CO2_ton := 1.8]
# Multiply each column in 'cols' by 1 (no change), emis units in kg CH4/m3/year or kg CH4/year, kg CO2 eq/m3/year, kg CO2 eq/year
# totCO2_eq_tot is in kt CO2 eq emitted (so kg CO2 eq multiplied by 10^6)
emis <- dat[, (cols) := lapply(.SD, function(x) x * 1), .SDcols = cols, by = c('StaldID', 'Scenarie', 'GoedningsNavn')][
, (tot_cols) := lapply(.SD, function(x) x * TotGoednabDyr), .SDcols = cols, by = c('StaldID', 'Scenarie')][
, ":="(CH4_dyr_tot = CH4_dyr_stald + CH4_dyr_lager,
NH3_dyr_tot = NH3_dyr_stald + NH3_dyr_lager,
N2O_dyr_tot = N2O_dyr_indir_tot + N2O_dyr_dir_tot)][
, ":=" (CO2_eq_tot_CH4 = CH4_dyr_tot * ..CO2_eq[['CH4']],
CO2_eq_tot_N2O = N2O_dyr_tot * ..CO2_eq[['N2O']])][
, CO2_eq_tot := CO2_eq_tot_N2O + CO2_eq_tot_CH4 + strøm_CO2_ton][
, ":="(totCH4_dyr_tot = totCH4_dyr_stald + totCH4_dyr_lager,
totN2O_dyr_tot = totN2O_dyr_dir_tot + totN2O_dyr_indir_tot)][
, totCO2_eq_tot := (totCH4_dyr_tot * ..CO2_eq[['CH4']] +
totN2O_dyr_tot * ..CO2_eq[['N2O']] + totstrøm_CO2_ton)/1e+06]
# totCO2_eq_fortræng is in kt CO2 eq (so kg CO2 eq multiplied by 10^6)
emis[, model_gruppe := 'char']
emis[!grepl('biogas', Scenarie), ":="(CH4_dyr_biog = 0, totCH4_dyr_biog = 0)]
emis[, ":="(CO2_eq_fortræng = CH4_dyr_biog * 2.32,
totCO2_eq_fortræng = (totCH4_dyr_biog * 2.32)/1e+06)][
, ":="(CO2_eq_tot = CO2_eq_tot - CO2_eq_fortræng,
totCO2_eq_tot = totCO2_eq_tot - totCO2_eq_fortræng)
]
for(i in model_gruppe_navne){
emis[StaldID %in% eval(parse(text = i)), model_gruppe := i]
}
emis_summary <- emis[, .(CH4_dyr_stald = unique(CH4_dyr_stald),
CH4_dyr_lager = unique(CH4_dyr_lager),
CH4_dyr_tot = unique(CH4_dyr_tot),
N2O_dyr_tot = unique(N2O_dyr_tot),
CO2_eq_fortræng = unique(CO2_eq_fortræng),
CO2_eq_tot = unique(CO2_eq_tot),
totCO2_eq_tot = sum(totCO2_eq_tot, na.rm = T)), by = c('Scenarie', 'model_gruppe')]
TotGoednabDyr <- setDT(read_excel('../output/TotGoedningabDyr.xlsx'))
Tech_udb <- setDT(read_excel('../data/teknologi_udbredelse.xlsx'))
Tech_pot <- setDT(read_excel('../data/teknologi_potentiale.xlsx'))
out <- merge.data.table(emis_summary, TotGoednabDyr)[Scenarie != "" & Scenarie != 'char']
techs <- unique(emis_summary[Scenarie != 'kontrol', Scenarie])
model_gruppe <- unique(out[, model_gruppe])
for(i in model_gruppe){
for(o in techs){
if(any(out[model_gruppe == i, Scenarie] == o)){
out[model_gruppe == i & Scenarie == o, ":="(udbredelse = ..Tech_udb[model_gruppe == i, eval(parse(text = o))],
potentiale = ..Tech_pot[model_gruppe == i, eval(parse(text = o))])]
}
}
}
out <- out[, ":="(reduktion_totCO2_eq_tot = (totCO2_eq_tot[Scenarie == 'kontrol'] - totCO2_eq_tot) * ((potentiale-udbredelse)/100),
reduktion_CO2_eq_tot_m3 = CO2_eq_tot[Scenarie == 'kontrol'] - CO2_eq_tot), by = 'model_gruppe'][order(Scenarie)]
out[, TotGoedningabDyr_kt_year_pot := TotGoednabDyr_kt_year * ((potentiale - udbredelse)/100)]
out <- out[!duplicated(out[, c('model_gruppe', 'Scenarie')])]
out_pot_goedning <- out[Scenarie != 'kontrol', .(TotGoednabDyr_kt_år = sum(TotGoedningabDyr_kt_year_pot)), by = c('Scenarie', 'Dyr')]
write.xlsx(out_pot_goedning, '../output/udbred_poten_kt_Goedn_år.xlsx')
out_dyr <- copy(out)
out_dyr <- out_dyr[, .(sum_reduktion_totCO2_eq_tot = sum(reduktion_totCO2_eq_tot),
mean_reduktion_totCO2_eq_tot_m3 = sum(reduktion_CO2_eq_tot_m3 * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_stald = sum(CH4_dyr_stald * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_lager = sum(CH4_dyr_lager * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_tot = sum(CH4_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
N2O_dyr_tot = sum(N2O_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
udbredelse = sum(udbredelse * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
fortrængning = sum(CO2_eq_fortræng * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year))
, by = c('Scenarie', 'Dyr')]
write.xlsx(out_dyr, '../output/emis_table_DyrSamlet_KVIK.xlsx')
rm(list = ls())
source('../scripts/modifyData.R')
source('../scripts/calcManureProd.R')
source('../scripts/calcEmissionTech.R')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_carbon_accounting - Copy/run")
rm(list = ls())
# get libraries
library(doParallel)
library(ABM)
library(dplyr)
library(readxl)
library(openxlsx)
path <- '../inputs/'
dat <- list.files(path, full.names = TRUE)
dat <- dat[grepl('xlsm', dat)]
gf <- list.files('../R', full.names = TRUE)
for (f in gf) source(f)
storage_mode <- TRUE
years <- 4
temp_overwrite = 'Vechi'
cores <- 1
cl <- makeCluster(cores)
doParallel::registerDoParallel(cl)
result <- foreach(i = 1:length(dat), .inorder = FALSE, .errorhandling = 'remove', .export = ls(globalenv()),
.packages = c('dplyr','readxl','ABM','openxlsx')) %dopar% {
model(x,y, dat = dat[i], storage_mode, years, temp_overwrite = temp_overwrite)
}
View(result)
stopCluster(cl)
