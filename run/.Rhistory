#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
View(nutrient_dat)
nutrient_long <- pivot_longer(nutrient_dat, cols = names(emission_dat)[!names(emission_dat) %in% c('source','section_ID','storage_ID','digestate_ID')],
names_to = 'variable', values_to = 'value')
nutrient_long <- pivot_longer(nutrient_dat, cols = names(nutrient_dat)[!names(nutrient_dat) %in% c('source','section_ID','storage_ID','digestate_ID')],
names_to = 'variable', values_to = 'value')
View(nutrient_long)
nutrient_long <- pivot_longer(nutrient_dat, cols = names(nutrient_dat)[!names(nutrient_dat) %in% c('source','section_ID','storage_ID','digestate_ID','year')],
names_to = 'variable', values_to = 'value')
View(nutrient_long)
nutrient_dat, year = NULL]
nutrient_dat[, year = NULL]
nutrient_dat$year = NULL
nutrient_long <- pivot_longer(nutrient_dat, cols = names(nutrient_dat)[!names(nutrient_dat) %in% c('source','section_ID','storage_ID','digestate_ID','year')],
names_to = 'variable', values_to = 'value')
View(nutrient_long)
allowed_strings <- c('C', 'N')
# Create a regex pattern to match only the desired substrings
pattern <- paste0(".*(", paste(allowed_strings, collapse = "|"), ").*")
# Extract the desired part or replace with NA if no match
nutrient_long$element <- ifelse(grepl(pattern, nutrient_long$variable),
sub(pattern, "\\1", nutrient_long$variable),
NA)
View(nutrient_long)
nutrient_long$unit <- nutrient_long$variable
View(nutrient_long)
allowed_strings <- c('C', 'N')
# Create a regex pattern to match only the desired substrings
pattern <- paste0(".*(", paste(allowed_strings, collapse = "|"), ").*")
# Extract the desired part or replace with NA if no match
nutrient_long$element <- ifelse(grepl(pattern, nutrient_long$variable),
sub(pattern, "\\1", nutrient_long$variable),
NA)
nutrient_long$unit <- nutrient_long$variable
nutrient_long$unit <- gsub('C_|N_','',emission_long$unit)
nutrient_long$unit <- gsub('C_|N_','',nutrient_long$unit)
View(nutrient_long)
View(nutrient_long)
View(nutrient_long)
unit_patterns <- c('load_kg_yr','emit_kg_yr','loss_frac')
unit_replacements <- c('kg loaded pr. year', 'kg emitted pr. year', 'fraction lost pr. year')
unit_patterns <- c('load_kg_yr','emit_kg_yr','loss_frac')
unit_replacements <- c('kg loaded pr. year', 'kg emitted pr. year', 'fraction lost pr. year')
for(i in seq_along(unit_patterns)){
nutrient_long$unit <- gsub(unit_patterns[i], unit_replacements[i], nutrient_long$unit)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
View(nutrient_long)
View(nutrient_long)
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
max_col_in_barn <- min(which(!is.na(colnames(input_barn)[apply(input_barn == "deactive", 2, any)]))) - 2
input_barn <- input_barn[, 2:max_col_in_barn]
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
max_col_in_storage <- min(which(!is.na(colnames(input_storage)[apply(input_storage == "deactive", 2, any)]))) - 2
input_storage <- input_storage[, 2:max_col_in_storage]
output1 <- c(list('Inputs in-barn' = input_barn, 'Input out-of-barn' = input_storage), out, i)
output1[[8]] <- NULL # remove last output (NTS why is it there to start with? - might be from error message setup)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
save_file <- gsub('.xlsx', '_output.xlsx', save_file)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
