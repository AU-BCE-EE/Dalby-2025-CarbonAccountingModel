fresh <- abm_farm(dat = paste0('../../../inputs/', dat$name[1], '.xlsm'), years = 1, v = c(scale.yield = 1), VSd_apply, manure = 'pig')
library(ABM)
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2025-KVIK/scripts")
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
# checking amonuts of manure
#test <- dat[StaldID == 7 & GoedningsNavn == 'Gylle' & Scenarie == 'kontrol']
#sum(test$TotGoednabDyr)
CO2_eq <- c(CH4 = 28, N2O = 265)
## SVIN
# gylle systemer
toklimastald_smågrise <- c(20)
spalter_smågrise <- c(46)
spalter_33_67_slagtesvin <- c(47)
spalter_50_75_slagtesvin <- c(72, 19)
spalter_25_50_slagtesvin <- c(73)
løs_individuel_søer <- c(60, 63, 8, 10, 80, 79)
farestald_delvis_spalte <- c(64)
farestald_fuldspalte <- c(65)
svin_gylle <- c(20,46,47,72,19,73,60,63,8,10,80,79,64,65)
## KVÆG
# gylle systemer
kvæg_ringkanal <- c(6, 13)
kvæg_fast_skrab <- c(5, 11)
kvæg_spalter_skrab <- c(7, 14)
kvæg_hæld_fast_skrab <- c(49)
kvæg_andre_hyppig <- c(2, 4) # 2 is spaltegulvbokse, what is that?
kvæg_gylle <- c(6,13,5,11,7,14,49,2,4)
model_gruppe_navne <- c('toklimastald_smågrise',
'spalter_smågrise',
'spalter_33_67_slagtesvin',
'spalter_50_75_slagtesvin',
'spalter_25_50_slagtesvin',
'løs_individuel_søer',
'farestald_delvis_spalte',
'farestald_fuldspalte',
'kvæg_ringkanal',
'kvæg_fast_skrab',
'kvæg_spalter_skrab',
'kvæg_hæld_fast_skrab',
'kvæg_andre_hyppig'
)
cols <- c('CH4_dyr_stald', 'CH4_dyr_lager', 'CH4_dyr_biog', 'NH3_dyr_stald', 'NH3_dyr_lager','N2O_dyr_dir_tot', 'N2O_dyr_indir_tot', 'strøm_CO2_ton')
tot_cols <- paste0('tot', cols)
dat[, strøm_CO2_ton := 0]
# Initialize the total columns with 0
dat <- dat[, (tot_cols) := 0][!duplicated(dat)]
# if biogas is used change the CH4 produktion to include emission from prestorage tank and change storage to digestate emission.
# also change N2O emission (based on national inventory report 2023, p431)
biogas <- copy(dat)[Scenarie == 'kontrol'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'biogas']
ugentlig_biogas <- copy(dat)[Scenarie == 'ugentlig'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'ugentlig_biogas']
køling_biogas <- copy(dat)[Scenarie == 'køling'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'køling_biogas']
dat <- rbind(dat, biogas, ugentlig_biogas, køling_biogas)
dat[grepl('køling', Scenarie) & DyreType == 'smågrise', strøm_CO2_ton := 1.3]
dat[grepl('køling', Scenarie) & DyreType == 'slagtesvin', strøm_CO2_ton := 1.4]
dat[grepl('køling', Scenarie) & DyreType == 'søer', strøm_CO2_ton := 1.8]
# Multiply each column in 'cols' by 1 (no change), emis units in kg CH4/m3/year or kg CH4/year, kg CO2 eq/m3/year, kg CO2 eq/year
# totCO2_eq_tot is in kt CO2 eq emitted (so kg CO2 eq multiplied by 10^6)
emis <- dat[, (cols) := lapply(.SD, function(x) x * 1), .SDcols = cols, by = c('StaldID', 'Scenarie', 'GoedningsNavn')][
, (tot_cols) := lapply(.SD, function(x) x * TotGoednabDyr), .SDcols = cols, by = c('StaldID', 'Scenarie')][
, ":="(CH4_dyr_tot = CH4_dyr_stald + CH4_dyr_lager,
NH3_dyr_tot = NH3_dyr_stald + NH3_dyr_lager,
N2O_dyr_tot = N2O_dyr_indir_tot + N2O_dyr_dir_tot)][
, ":=" (CO2_eq_tot_CH4 = CH4_dyr_tot * ..CO2_eq[['CH4']],
CO2_eq_tot_N2O = N2O_dyr_tot * ..CO2_eq[['N2O']])][
, CO2_eq_tot := CO2_eq_tot_N2O + CO2_eq_tot_CH4 + strøm_CO2_ton][
, ":="(totCH4_dyr_tot = totCH4_dyr_stald + totCH4_dyr_lager,
totN2O_dyr_tot = totN2O_dyr_dir_tot + totN2O_dyr_indir_tot)][
, totCO2_eq_tot := (totCH4_dyr_tot * ..CO2_eq[['CH4']] +
totN2O_dyr_tot * ..CO2_eq[['N2O']] + totstrøm_CO2_ton)/1e+06]
# totCO2_eq_fortræng is in kt CO2 eq (so kg CO2 eq multiplied by 10^6)
emis[, model_gruppe := 'char']
emis[!grepl('biogas', Scenarie), ":="(CH4_dyr_biog = 0, totCH4_dyr_biog = 0)]
emis[, ":="(CO2_eq_fortræng = CH4_dyr_biog * 2.32,
totCO2_eq_fortræng = (totCH4_dyr_biog * 2.32)/1e+06)][
, ":="(CO2_eq_tot = CO2_eq_tot - CO2_eq_fortræng,
totCO2_eq_tot = totCO2_eq_tot - totCO2_eq_fortræng)
]
for(i in model_gruppe_navne){
emis[StaldID %in% eval(parse(text = i)), model_gruppe := i]
}
emis_summary <- emis[, .(CH4_dyr_stald = unique(CH4_dyr_stald),
CH4_dyr_lager = unique(CH4_dyr_lager),
CH4_dyr_tot = unique(CH4_dyr_tot),
N2O_dyr_tot = unique(N2O_dyr_tot),
CO2_eq_fortræng = unique(CO2_eq_fortræng),
CO2_eq_tot = unique(CO2_eq_tot),
totCO2_eq_tot = sum(totCO2_eq_tot, na.rm = T)), by = c('Scenarie', 'model_gruppe')]
TotGoednabDyr <- setDT(read_excel('../output/TotGoedningabDyr.xlsx'))
Tech_udb <- setDT(read_excel('../data/teknologi_udbredelse.xlsx'))
Tech_pot <- setDT(read_excel('../data/teknologi_potentiale.xlsx'))
out <- merge.data.table(emis_summary, TotGoednabDyr)[Scenarie != "" & Scenarie != 'char']
techs <- unique(emis_summary[Scenarie != 'kontrol', Scenarie])
model_gruppe <- unique(out[, model_gruppe])
for(i in model_gruppe){
for(o in techs){
if(any(out[model_gruppe == i, Scenarie] == o)){
out[model_gruppe == i & Scenarie == o, ":="(udbredelse = ..Tech_udb[model_gruppe == i, eval(parse(text = o))],
potentiale = ..Tech_pot[model_gruppe == i, eval(parse(text = o))])]
}
}
}
out <- out[, ":="(reduktion_totCO2_eq_tot = (totCO2_eq_tot[Scenarie == 'kontrol'] - totCO2_eq_tot) * ((potentiale-udbredelse)/100),
reduktion_CO2_eq_tot_m3 = CO2_eq_tot[Scenarie == 'kontrol'] - CO2_eq_tot), by = 'model_gruppe'][order(Scenarie)]
out[, TotGoedningabDyr_kt_year_pot := TotGoednabDyr_kt_year * ((potentiale - udbredelse)/100)]
out <- out[!duplicated(out[, c('model_gruppe', 'Scenarie')])]
out_pot_goedning <- out[Scenarie != 'kontrol', .(TotGoednabDyr_kt_år = sum(TotGoedningabDyr_kt_year_pot)), by = c('Scenarie', 'Dyr')]
write.xlsx(out_pot_goedning, '../output/udbred_poten_kt_Goedn_år.xlsx')
out_dyr <- copy(out)
out_dyr <- out_dyr[, .(sum_reduktion_totCO2_eq_tot = sum(reduktion_totCO2_eq_tot),
mean_reduktion_totCO2_eq_tot_m3 = sum(reduktion_CO2_eq_tot_m3 * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_stald = sum(CH4_dyr_stald * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_lager = sum(CH4_dyr_lager * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_tot = sum(CH4_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
N2O_dyr_tot = sum(N2O_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
udbredelse = sum(udbredelse * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
fortrængning = sum(CO2_eq_fortræng * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year))
, by = c('Scenarie', 'Dyr')]
write.xlsx(out_dyr, '../output/emis_table_DyrSamlet_KVIK.xlsx')
rm(list = ls())
source('../scripts/modifyData.R')
source('../scripts/calcManureProd.R')
source('../scripts/calcEmissionTech.R')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_carbon_accounting - Copy/run")
rm(list = ls())
# get libraries
library(doParallel)
library(ABM)
library(dplyr)
library(readxl)
library(openxlsx)
path <- '../inputs/'
dat <- list.files(path, full.names = TRUE)
dat <- dat[grepl('xlsm', dat)]
gf <- list.files('../R', full.names = TRUE)
for (f in gf) source(f)
storage_mode <- TRUE
years <- 4
temp_overwrite = 'Vechi'
cores <- 1
cl <- makeCluster(cores)
doParallel::registerDoParallel(cl)
result <- foreach(i = 1:length(dat), .inorder = FALSE, .errorhandling = 'remove', .export = ls(globalenv()),
.packages = c('dplyr','readxl','ABM','openxlsx')) %dopar% {
model(x,y, dat = dat[i], storage_mode, years, temp_overwrite = temp_overwrite)
}
View(result)
stopCluster(cl)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/ABM_carbon_accounting_git/run")
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ggplot2)
library(ABM)
#devtools::install_github('AU-BCE-EE/ABM', build_vignettes = FALSE)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
getwd()
dirname()
dirname(normalizePath(commandArgs(trailingOnly = FALSE)[grep("--file=", commandArgs())]))
print(script_dir)
script_dir <- dirname(normalizePath(commandArgs(trailingOnly = FALSE)[grep("--file=", commandArgs())]))
print(script_dir)
script_dir <- dirname(normalizePath(sys.frame(1)$ofile))
print(script_dir)
getwd()
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/ABM_carbon_accounting_git/run")
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/ABM_carbon_accounting_git/run")
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packges()
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/ABM_carbon_accounting_git/run")
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packges()
source(abm_packges)
abm_packages
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
View(ent_dat)
View(emission_dat)
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']/365/norm_dat$n_anim[1]
View(norm_dat)
ggplot(norm_dat, aes(time, CH4_emis_rate, col = source)) + geom_point()
library(ggplot2)
ggplot(norm_dat, aes(time, CH4_emis_rate, col = source)) + geom_point()
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
ent_dat <- ent_dat %>%
mutate(
time_diff = c(0, diff(time)),  # Calculate time difference between consecutive time points
CH4_emis_rate = CH4_emis_rate * time_diff,
CH4_A_emis_rate = CH4_A_emis_rate * time_diff,# Calculate emission for each time interval
CH4_emis_cum = cumsum(CH4_emis_rate),
CH4_A_emis_cum = cumsum(CH4_A_emis_rate)# Cumulative sum of emissions
)
barn_dat$storage_ID <- NA
barn_dat$digestate_ID <- NA
norm_dat <- bind_rows(ent_dat[, names(ent_dat) %in% norm_vars], barn_dat[, names(barn_dat) %in% norm_vars], storage_dat[, names(storage_dat) %in% norm_vars], digestate_dat[, names(digestate_dat) %in% norm_vars]) %>%
mutate(year = ceiling(time/365))
if(detail_output) {
name <- gsub('../inputs/|/',' ',dat)
path <- paste0('../outputs/', gsub('xlsm','csv', name))
write.csv(norm_dat, path)
}
.rain <- expression(rain[1] * area[1]/1000 * 365) # rain in kg per year
.evap <- expression(evap[1] * area[1]/1000 * 365) # evaporation in kg per year
.wash_water <- expression(sum(wash_water/batch_time/1000))
.slurry_loaded <- expression(sum(slurry_diff[slurry_diff > 0])/1000)
norm_dat <- norm_dat %>% group_by(source, year, section_ID, storage_ID, digestate_ID) %>% mutate(slurry_diff = c(0, diff(slurry_mass)) + (evap - rain) * area)
C_load <- expression((max(C_load_cum) - min(C_load_cum))/1000) # kg/yr
N_load <- expression((max(N_load_cum) - min(N_load_cum))/1000) # kg/yr
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
# something is wrong with instant here: browser()
emission_dat <- norm_dat %>%
group_by(source, year, section_ID, storage_ID, digestate_ID) %>%
reframe(CH4_C_kg_yr = (max(CH4_emis_cum, na.rm = T) - min(CH4_emis_cum, na.rm = T))/1000 * C_CH4, CH4_C_kg_anim_yr = (max(CH4_emis_cum, na.rm = T) - min(CH4_emis_cum, na.rm = T))/1000 /n_anim * C_CH4, CH4_C_kg_parea_yr = (max(CH4_emis_cum, na.rm = T) - min(CH4_emis_cum, na.rm = T))/1000 /prod_area * C_CH4,
CH4_C_kg_m3_load_yr = (max(CH4_emis_cum, na.rm = T) - min(CH4_emis_cum, na.rm = T))/1000 /eval(.slurry_loaded) * C_CH4, CH4_C_kg_m3_yr = mean(CH4_emis_rate, na.rm = T)/mean(slurry_mass, na.rm = T) * 365 * C_CH4,
CH4_C_percent_C_load_yr = (max(CH4_emis_cum, na.rm = T) - min(CH4_emis_cum, na.rm = T))/1000/eval(C_load) * C_CH4 * 100,
CH4_C_A_kg_yr = (max(CH4_A_emis_cum, na.rm = T) - min(CH4_A_emis_cum, na.rm = T))/1000 * C_CH4, CH4_C_A_kg_anim_yr = (max(CH4_A_emis_cum, na.rm = T) - min(CH4_A_emis_cum, na.rm = T))/1000 /n_anim * C_CH4, CH4_C_A_kg_parea_yr = (max(CH4_A_emis_cum, na.rm = T) - min(CH4_A_emis_cum, na.rm = T))/1000 /prod_area * C_CH4,
CH4_C_A_kg_m3_load_yr = (max(CH4_A_emis_cum, na.rm = T) - min(CH4_A_emis_cum, na.rm = T))/1000 /eval(.slurry_loaded) * C_CH4, CH4_C_A_kg_m3_yr = mean(CH4_A_emis_rate, na.rm = T)/mean(slurry_mass, na.rm = T) * 365 * C_CH4,
NH3_N_kg_yr = (max(NH3_emis_cum, na.rm = T) - min(NH3_emis_cum, na.rm = T))/1000,  NH3_N_kg_anim_yr = (max(NH3_emis_cum, na.rm = T) - min(NH3_emis_cum, na.rm = T))/1000 /n_anim, NH3_N_kg_parea_yr = (max(NH3_emis_cum, na.rm = T) - min(NH3_emis_cum, na.rm = T))/1000 /prod_area,
NH3_N_kg_m3_load_yr = (max(NH3_emis_cum, na.rm = T) - min(NH3_emis_cum, na.rm = T))/1000 /eval(.slurry_loaded), NH3_N_kg_m3_yr = mean(NH3_emis_rate, na.rm = T)/mean(slurry_mass, na.rm = T) * 365,
NH3_N_percent_N_load_yr = (max(NH3_emis_cum, na.rm = T) - min(NH3_emis_cum, na.rm = T))/1000/eval(N_load) * 100,
N2O_N_kg_yr = (max(N2O_emis_cum, na.rm = T) - min(N2O_emis_cum, na.rm = T))/1000,  N2O_N_kg_anim_yr = (max(N2O_emis_cum, na.rm = T) - min(N2O_emis_cum, na.rm = T))/1000 /n_anim, N2O_N_kg_parea_yr = (max(N2O_emis_cum, na.rm = T) - min(N2O_emis_cum, na.rm = T))/1000 /prod_area,
N2O_N_kg_m3_load_yr = (max(N2O_emis_cum, na.rm = T) - min(N2O_emis_cum, na.rm = T))/1000 /eval(.slurry_loaded), N2O_N_kg_m3_yr = mean(N2O_emis_rate, na.rm = T)/mean(slurry_mass, na.rm = T) * 365,
N2O_N_percent_N_load_yr = (max(N2O_emis_cum, na.rm = T) - min(N2O_emis_cum, na.rm = T))/1000/eval(N_load) * 100,
CO2_C_kg_yr = (max(CO2_emis_cum, na.rm = T) - min(CO2_emis_cum, na.rm = T))/1000 * C_CO2, CO2_C_kg_anim_yr = (max(CO2_emis_cum, na.rm = T) - min(CO2_emis_cum, na.rm = T))/1000 /n_anim * C_CO2, CO2_C_kg_parea_yr = (max(CO2_emis_cum, na.rm = T) - min(CO2_emis_cum, na.rm = T))/1000 /prod_area * C_CO2,
CO2_C_kg_m3_load_yr = (max(CO2_emis_cum, na.rm = T) - min(CO2_emis_cum, na.rm = T))/1000 /eval(.slurry_loaded) * C_CO2, CO2_C_kg_m3_yr = mean(CO2_emis_rate, na.rm = T)/mean(slurry_mass, na.rm = T) * 365 * C_CO2,
CO2_C_percent_C_load_yr = (max(CO2_emis_cum, na.rm = T) - min(CO2_emis_cum, na.rm = T))/1000/eval(C_load) * C_CO2 * 100) %>%
filter (year == years-1) %>% distinct() %>% ungroup() %>%
mutate(across(starts_with(c('CH4','NH3', 'N2O', 'CO2','slurry_')), function(x) round(x, digits = 2))) %>%
mutate(source = factor(source, levels = c('enteric','barn','storage'))) %>%
arrange(source)
View(emission_dat)
0.72/365*1000
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']/365/norm_dat$n_anim[1]
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']/365/norm_dat$n_anim[1]
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']/norm_dat$n_anim[1]
barn_dat$rest_d
barn_dat$batch_time
barn_dat$slurry_prod_rate
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']
norm_dat$CH4_emis_cum[norm_dat$source == 'enteric']
max(norm_dat$CH4_emis_cum[norm_dat$source == 'enteric'])
max(norm_dat$CH4_emis_cum[norm_dat$source == 'enteric'])/years
max(norm_dat$CH4_emis_cum[norm_dat$source == 'enteric'])/years/365
norm_dat$CH4_emis_rate[norm_dat$source == 'enteric']
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
