ggplot(dat_long, aes(datetime, value)) + geom_point(na.rm = T, size = 0.1) + facet_wrap(~variable, scales = 'free')
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_out <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$time, out$CH4_conc_kg_m3)
plot(out$time, out$CH4_conc_kg_m3)
View(out)
plot(out$hours, out$CH4_conc_kg_m3)
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 HS conc., kg/m3')
kg_m3_ppm <- 1000 * 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
out$time <- out$hours
merge(out, dat_int)
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
out$time <- out$hours
merge(out, dat_int, by = 'time')
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
merged$hour_of_day <- format(merged$datetime, "%H")
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
View(merged)
View(merged)
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
out$time <- out$hours
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
#hour of the day
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
#calculate grouped mean emission by day/night categorization
day_night_emis <- merged[, .(CH4_emis_kg_m3_day = mean(CH4_emis_kg_hour)/vol_manure * 24), by = 'tod']
day_night_emis
mean_emis <- mean(out$CH4_emis_kg_hour/vol_manure * 24)
print(mean_emis)
print(day_night_emis)
0.07705159/mean_emis
0.07705159/mean_emis * 100 - 100
print(paste0('+ ', 0.07705159/mean_emis * 100 - 100))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), ' %'))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), '%'))
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[
, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y,
time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[
, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
# m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
y = - (vent * y)/vol_HS + emis/vol_HS
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
load("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/data/demo_data.RData")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
temp <- rnorm(1000, 20, sd = 1)
hist(temp)
temp <- rnorm(100000, 20, sd = 1)
hist(temp)
hist(temp, bins = 100)
hist(temp, breaks = 100)
temp_sample <- sample(temp, 10000, replace = T)
pred = 0.52 * temp_sample
hist(pred, breaks = 100)
evap = 0.52 * temp_sample
hist(evap, breaks = 100)
quantile(evap, probs = seq(0, 1, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0.025, 0.975))
quantile(evap, probs = seq(0.025, 1, 0.025))
quantile(evap, probs = seq(0.025, 0.025))
?quantile
quantile(evap, probs = seq(0.025, 0.25))
quantile(evap, probs = seq(0.025, 10, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0, 1, 0.025))
parameter <- rnorm(100, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
hist(parameter, breaks = 10)
fitted_parameter <- rnorm(20, 52, sd = 4)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 5)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 8)
library(boot)
??boot
mean_fun <- function(data, indices) colMeans(data[indices,])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
mean_fun <- function(data, indices) colMeans(data[indices])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
fitted_parameter
dat <- as.data.frame(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat[indices,]
mean_fun <- function(data, indices) colMeans(data[indices,])
dat <- as.data.frame(fitted_parameter)
dat
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- as.array(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- fitted_parameter
repeats = 10000
sample(dat, 20, replace = T)
out <- replicate(10000, sample(dat, 20, replace = T))
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
rbind(out, out1)
}
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
out <- rbind(out, out1)
}
hist(out)
?constrOptim
install.packages('gputools')
install.packages('rpud')
bar <- 1/10^9 * 333
Molar <- bar * 0.025
Molar * 10^9
remove.packages('ABM')
Temp <- 273:330
u <- exp(-3.540+222.21/(Temp-149.37))
plot(Temp, u)
u <- 10^(-3.540+222.21/(Temp-149.37))
plot(Temp, u)
library(biogas)
library(biogas)
calcCOD('C5H7O2N')
library(ABM)
out1 <- abm(365, add_pars = list(xa_fresh = 0.06))
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
plot(out1$time, out1$m2_conc)
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc)
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$m2_conc, xlab = 'days')
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
out1 <- abm(365, add_pars = list(slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_init.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_init.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum, col = "red")
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', ylim = c(0,8))
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', col = "red")
library(ABM)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
out1 <- abm(365, add_pars = list(xa_init.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_init.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc, col = "red")
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate, col = "red")
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum, col = "red")
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', ylim = c(0,8))
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', col = "red")
View(out2)
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = T)
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ggplot2)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = T)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2025-CarbonAccountingModel/test")
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
#dat <- '../inputs/vanderzaag_2019/vanderzaag_2019.xlsm'
dat <- '../inputs/main_sheet.xlsm'
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
debug(feedFun)
#
#debug(abm_farm)
#debug(get_farm)
#debug(rates)
#debug(slurry_app_mod)
#debug(calcNorm)
out <- abm_farm(dat = dat, storage_mode = TRUE, years = 2)
DM_intake
batch_time
DM_intake/batch_time
urine_N2 <- (-1249.19 + 427.86 * feed_dat.mod$N/batch_time - 6.0408 * milk_prod/batch_time + 12.3346 * DM_intake/batch_time) * batch_time
feed_dat.mod$N
(feed_dat.mod$N / (DM_intake * 1000) * 100))
(feed_dat.mod$N / (DM_intake * 1000) * 100)
DM_intake
feed_dat.mod$N
urine_N2 <- (-1249.19 + 427.86 * (feed_dat.mod$N / (DM_intake * 1000) * 100) - 6.0408 * milk_prod/batch_time + 12.3346 * DM_intake/batch_time) * batch_time
urine_N2 <- (-1249.19 + 427.86 * (feed_dat.mod$N / (DM_intake * 1000) * 100) - 6.0408 * (milk_prod/batch_time) + 12.3346 * (DM_intake/batch_time)) * batch_time
(feed_dat.mod$N / (DM_intake * 1000) * 100)
urine_N2 <- (-1249.19 + 427.86 * (feed_dat.mod$N / (DM_intake * 1000) * 100) - 6.0408 * (milk_prod/batch_time) + 28.25 * (DM_intake/batch_time)) * batch_time
urea_N2 <- (-582.81 + 201.35 * (feed_dat.mod$N / (DM_intake * 1000) * 100) - 3.1454 * (milk_prod/batch_time) + 12.3346 *  (DM_intake/batch_time)) * batch_time
# from Dijkstra et al., 2013 Animal (2013), 7:s2, pp 292–302
urea_N <- 0.761 * urine_N # g/year
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2025-CarbonAccountingModel/test")
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
#dat <- '../inputs/vanderzaag_2019/vanderzaag_2019.xlsm'
dat <- '../inputs/main_sheet.xlsm'
#dat <- 'C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/inputs/kari_2018.xlsm'
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
#
#debug(abm_farm)
#debug(get_farm)
#debug(rates)
#debug(slurry_app_mod)
#debug(calcNorm)
out <- abm_farm(dat = dat, storage_mode = TRUE, years = 2)
type_anim
class_anim
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
#dat <- '../inputs/vanderzaag_2019/vanderzaag_2019.xlsm'
dat <- '../inputs/main_sheet.xlsm'
#dat <- 'C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/inputs/kari_2018.xlsm'
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
#ff <- list.files('../../ABM/R', full.names = T)
#for(i in ff) source(i)
#
#debug(abm_farm)
#debug(get_farm)
#debug(rates)
#debug(slurry_app_mod)
#debug(calcNorm)
out <- abm_farm(dat = dat, storage_mode = TRUE, years = 2)
rm(list = ls())
library(readxl)
library(dplyr)
library(ABM)
#dat <- '../inputs/saman_paper/Sow lactating average diet.xlsm'
#dat <- '../inputs/saman_paper/Sow gestation average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig average diet.xlsm'
#dat <- '../inputs/saman_paper/Growing pig 5% sugar beet.xlsm'
#dat <- '../inputs/vanderzaag_2019/vanderzaag_2019.xlsm'
dat <- '../inputs/main_sheet.xlsm'
#dat <- 'C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/inputs/kari_2018.xlsm'
ff <- list.files('../R', full.names = T)
for(i in ff) source(i)
#ff <- list.files('../../ABM/R', full.names = T)
#for(i in ff) source(i)
#
#debug(abm_farm)
#debug(get_farm)
#debug(rates)
#debug(slurry_app_mod)
#debug(calcNorm)
out <- abm_farm(dat = dat, storage_mode = TRUE, years = 2)
farm_dat$extra_pars$class_anim
ABM::arrh_pars_pig2.0
ABM::arrh_pars_pig2.0
